<date>Jan 31 18:10:29 2006 </date>

Making IVs fixed, and not randomly generated, made negligible
difference to running time, from 60 to 59 secs on 64-element array
(twice) traversal. Adding optimization (-O2) took it down to 49 secs.

<date>Wed Feb 13 18:07:32 2006</date>

With all the stream processor stuff (ie. all the small template
functions) the array-v0 test on 64 elements runs in 119 secs, without
compile optimizations. With -O2 it's down to 95. No batching of IO's
yet though, which could be the big factor here.


<date>Wed Feb 15 18:08:05 2006</date>

Added I/O caching in the stream processor! The array-v0 circuit
compiled with -O2 run took 51 secs


<date>Thu Feb 16 14:08:26 2006</date>

With rather large batching - 512 or 1024 ops at a time, which means
just one I/O per stream for the most, time is down to 48 seconds.



Mon Feb 20 17:31:10 2006

Debugging array-v1.sfdl evaluation: have a discrepancy at ReadArray gates 1361
and 1368, on idx 24 - reads 0, should read 24. The idx is correct, so just the
read screws up.

Tue Feb 21 15:46:48 2006

Ran array-v1.sfdl (N=64) successfully on the card. Took 149 seconds, with stream
proc cache set to 4K. Have a lot of tightening to do on the array branching
code, and literal values in the circuit.



<date>Sun Nov  5 18:09:49 2006</date>

Some thought to be given to NIL values for enable bits. Enable has to be true in
one branch and false in the other. which seems to mean, eg. that NOT (NIL) ->
true, because we use a NOT to generate the false-branch enable value. If we have
NOT(NIL) -> NIL, and a loop condition is NIL, then both enable bits for that
conditional will be treated as false!
